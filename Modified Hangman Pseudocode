# ===== PSEUDOCODE FOR DEVELOPER HANGMAN GAME =====

# INITIALIZATION
Initialize pygame
Set window dimensions (WIDTH, HEIGHT)
Create game window with title "Developer Hangman"

# CONSTANTS
Define RADIUS = 20 (button size)
Define GAP = 15 (spacing between buttons)
Define A = 65 (ASCII for 'A')
Define word list WORDS with developer terms
Define colors (WHITE, BLACK, GRAY, GREEN)

# FUNCTION: initialize_letter_buttons()
Create empty buttons list
Calculate starting x position to center buttons
Set starting y position
For each letter A-Z:
    Calculate x,y position in 2 rows (13 letters per row)
    Add button to list with [x, y, letter, visible=True]
Return buttons list

# FUNCTION: reset_game()
Reset global variables:
    hangman_status = 0
    word = random choice from WORDS
    guessed = empty list
    hint_available = 0
    incorrect_guesses = 0
Set all letter buttons to visible

# FUNCTION: draw_end_buttons()
Create Retry and Quit buttons:
    Calculate centered positions
    Draw gray rectangles with black borders
    Add "Retry" and "Quit" text
Return button rectangles for collision detection

# FUNCTION: draw()
Fill screen with white
Display "DEVELOPER HANGMAN" title at top center

# Display word with blanks/guessed letters:
For each letter in target word:
    If guessed, show letter
    Else show underscore
Display this at center

# Draw letter buttons:
For each button in letters:
    If visible and not guessed:
        Draw circle outline
        Draw letter centered in circle

# Draw hint system:
If hints available > 0:
    Draw green hint button at bottom right
Display remaining hint count

# Draw current hangman image (0-6)
Update display

# FUNCTION: draw_hint_button()
Create rectangle at bottom right
Draw green button with black border
Add "Use Hint" text
Return button rectangle for collision

# FUNCTION: use_hint()
Get list of unguessed letters in word
If any available:
    Choose random unguessed letter
    Add to guessed list
    Decrement hint count
    Disable corresponding letter button

# FUNCTION: display_message(message)
Pause briefly
Clear screen
Display win/lose message at center
Draw Retry and Quit buttons
Wait for player choice:
    If Retry: return True
    If Quit: return False

# MAIN GAME LOOP
Initialize game (reset_game())
Set up game clock
Set run = True

While run:
    Cap at 60 FPS
    
    # EVENT HANDLING
    For each event:
        If QUIT event:
            Set run = False
            
        If MOUSEBUTTONDOWN:
            Get mouse position
            
            # Check hint button click
            If hints available and clicked:
                Call use_hint()
                
            # Check letter button clicks
            For each visible, unguessed letter button:
                If mouse click within button radius:
                    Disable button
                    Add letter to guessed list
                    
                    If letter not in word:
                        Increment hangman_status
                        Increment incorrect_guesses
                        Grant hint every 2 incorrect guesses
    
    Call draw() to update display
    
    # WIN/LOSE CHECK
    If all letters in word guessed:
        Show win message
        If player chooses Retry: reset_game()
        Else: quit
        
    If hangman_status == 6 (full hangman):
        Show lose message
        If player chooses Retry: reset_game()
        Else: quit

# GAME RESTART LOOP
While True:
    If main() returns False:
        Break
Quit pygame
